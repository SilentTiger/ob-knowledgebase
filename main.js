'use strict';

var obsidian = require('obsidian');

const VIEW_TYPE_SIDEBAR = 'my-plugin-sidebar';
class SidebarView extends obsidian.ItemView {
    constructor(leaf) {
        super(leaf);
    }
    getViewType() {
        return VIEW_TYPE_SIDEBAR;
    }
    getDisplayText() {
        return 'My Plugin Sidebar';
    }
    async onOpen() {
        const container = this.containerEl.children[1];
        container.empty();
        container.createEl('h4', { text: 'My Plugin Sidebar' });
        container.createEl('p', {
            text: 'This is the custom sidebar for My Plugin.'
        });
    }
    async onClose() { }
}

const DEFAULT_SETTINGS = {
    mySetting: 'default'
};
class MyPlugin extends obsidian.Plugin {
    constructor(app, manifest) {
        super(app, manifest);
        this.settings = DEFAULT_SETTINGS;
    }
    async onload() {
        await this.loadSettings();
        // 注册侧边栏视图
        this.registerView(VIEW_TYPE_SIDEBAR, (leaf) => new SidebarView(leaf));
        // 添加快捷键命令
        this.addCommand({
            id: 'open-sidebar',
            name: 'Open Sidebar',
            hotkeys: [{ modifiers: ["Mod", "Shift"], key: "L" }],
            callback: () => {
                this.activateSidebar();
            }
        });
        this.addCommand({
            id: 'sample-command',
            name: 'Sample Command',
            callback: () => {
                new window.Notice('Hello from MyPlugin!');
            }
        });
    }
    async onunload() {
        console.log('Unloading plugin');
    }
    activateSidebar() {
        const { workspace } = this.app;
        let leaf = workspace.getLeavesOfType(VIEW_TYPE_SIDEBAR)[0];
        if (!leaf) {
            const newLeaf = workspace.getRightLeaf(false);
            if (!newLeaf) {
                console.error('无法创建右侧边栏');
                return;
            }
            leaf = newLeaf;
            leaf.setViewState({
                type: VIEW_TYPE_SIDEBAR,
                active: true
            });
        }
        if (leaf) {
            workspace.revealLeaf(leaf);
        }
    }
    async loadSettings() {
        this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    }
    async saveSettings() {
        await this.saveData(this.settings);
    }
}

module.exports = MyPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsic3JjL3NpZGViYXIudHMiLCJzcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJdGVtVmlldywgV29ya3NwYWNlTGVhZiB9IGZyb20gJ29ic2lkaWFuJztcclxuXHJcbmV4cG9ydCBjb25zdCBWSUVXX1RZUEVfU0lERUJBUiA9ICdteS1wbHVnaW4tc2lkZWJhcic7XHJcblxyXG5leHBvcnQgY2xhc3MgU2lkZWJhclZpZXcgZXh0ZW5kcyBJdGVtVmlldyB7XHJcbiAgY29uc3RydWN0b3IobGVhZjogV29ya3NwYWNlTGVhZikge1xyXG4gICAgc3VwZXIobGVhZik7XHJcbiAgfVxyXG5cclxuICBnZXRWaWV3VHlwZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIFZJRVdfVFlQRV9TSURFQkFSO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGlzcGxheVRleHQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiAnTXkgUGx1Z2luIFNpZGViYXInO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgb25PcGVuKCkge1xyXG4gICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXJFbC5jaGlsZHJlblsxXTtcclxuICAgIGNvbnRhaW5lci5lbXB0eSgpO1xyXG4gICAgY29udGFpbmVyLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ015IFBsdWdpbiBTaWRlYmFyJyB9KTtcclxuICAgIGNvbnRhaW5lci5jcmVhdGVFbCgncCcsIHsgXHJcbiAgICAgIHRleHQ6ICdUaGlzIGlzIHRoZSBjdXN0b20gc2lkZWJhciBmb3IgTXkgUGx1Z2luLidcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgb25DbG9zZSgpIHt9XHJcbn0iLCJpbXBvcnQgeyBBcHAsIFBsdWdpbiwgUGx1Z2luTWFuaWZlc3QgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IFNpZGViYXJWaWV3LCBWSUVXX1RZUEVfU0lERUJBUiB9IGZyb20gJy4vc2lkZWJhcic7XHJcblxyXG5pbnRlcmZhY2UgTXlQbHVnaW5TZXR0aW5ncyB7XHJcbiAgICBteVNldHRpbmc6IHN0cmluZztcclxufVxyXG5cclxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogTXlQbHVnaW5TZXR0aW5ncyA9IHtcclxuICAgIG15U2V0dGluZzogJ2RlZmF1bHQnXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE15UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuICAgIHNldHRpbmdzOiBNeVBsdWdpblNldHRpbmdzO1xyXG4gICAgc2lkZWJhclZpZXchOiBTaWRlYmFyVmlldztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgbWFuaWZlc3Q6IFBsdWdpbk1hbmlmZXN0KSB7XHJcbiAgICAgICAgc3VwZXIoYXBwLCBtYW5pZmVzdCk7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IERFRkFVTFRfU0VUVElOR1M7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g5rOo5YaM5L6n6L655qCP6KeG5Zu+XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlclZpZXcoXHJcbiAgICAgICAgICAgIFZJRVdfVFlQRV9TSURFQkFSLFxyXG4gICAgICAgICAgICAobGVhZikgPT4gbmV3IFNpZGViYXJWaWV3KGxlYWYpXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8g5re75Yqg5b+r5o236ZSu5ZG95LukXHJcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgICAgICAgaWQ6ICdvcGVuLXNpZGViYXInLFxyXG4gICAgICAgICAgICBuYW1lOiAnT3BlbiBTaWRlYmFyJyxcclxuICAgICAgICAgICAgaG90a2V5czogW3sgbW9kaWZpZXJzOiBbXCJNb2RcIiwgXCJTaGlmdFwiXSwga2V5OiBcIkxcIiB9XSxcclxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZhdGVTaWRlYmFyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgICAgICAgaWQ6ICdzYW1wbGUtY29tbWFuZCcsXHJcbiAgICAgICAgICAgIG5hbWU6ICdTYW1wbGUgQ29tbWFuZCcsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBuZXcgKHdpbmRvdyBhcyBhbnkpLk5vdGljZSgnSGVsbG8gZnJvbSBNeVBsdWdpbiEnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIG9udW5sb2FkKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdVbmxvYWRpbmcgcGx1Z2luJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhY3RpdmF0ZVNpZGViYXIoKSB7XHJcbiAgICAgICAgY29uc3QgeyB3b3Jrc3BhY2UgfSA9IHRoaXMuYXBwO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBsZWFmID0gd29ya3NwYWNlLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEVfU0lERUJBUilbMF07XHJcbiAgICAgICAgaWYgKCFsZWFmKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0xlYWYgPSB3b3Jrc3BhY2UuZ2V0UmlnaHRMZWFmKGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKCFuZXdMZWFmKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCfml6Dms5XliJvlu7rlj7PkvqfovrnmoI8nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZWFmID0gbmV3TGVhZjtcclxuICAgICAgICAgICAgbGVhZi5zZXRWaWV3U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogVklFV19UWVBFX1NJREVCQVIsXHJcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsZWFmKSB7XHJcbiAgICAgICAgICAgIHdvcmtzcGFjZS5yZXZlYWxMZWFmKGxlYWYpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcbiAgICB9XHJcbn0iXSwibmFtZXMiOlsiSXRlbVZpZXciLCJQbHVnaW4iXSwibWFwcGluZ3MiOiI7Ozs7QUFFTyxNQUFNLGlCQUFpQixHQUFHLG1CQUFtQixDQUFDO0FBRS9DLE1BQU8sV0FBWSxTQUFRQSxpQkFBUSxDQUFBO0FBQ3ZDLElBQUEsV0FBQSxDQUFZLElBQW1CLEVBQUE7UUFDN0IsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2I7SUFFRCxXQUFXLEdBQUE7QUFDVCxRQUFBLE9BQU8saUJBQWlCLENBQUM7S0FDMUI7SUFFRCxjQUFjLEdBQUE7QUFDWixRQUFBLE9BQU8sbUJBQW1CLENBQUM7S0FDNUI7QUFFRCxJQUFBLE1BQU0sTUFBTSxHQUFBO1FBQ1YsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0MsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2xCLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFLENBQUMsQ0FBQztBQUN4RCxRQUFBLFNBQVMsQ0FB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
